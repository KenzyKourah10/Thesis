{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNy2AxnoQzZDn7LWsKR6F4P"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":[],"metadata":{"id":"oLa24viUpjaW"}},{"cell_type":"code","source":["drive.mount ('/content/drive')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lvooGrqbpjsO","executionInfo":{"status":"ok","timestamp":1714219709220,"user_tz":-180,"elapsed":21841,"user":{"displayName":"Kenzy Kourah","userId":"10522561092114236921"}},"outputId":"15a6ac45-4c0f-4ed9-9189-990533334ffb"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":226},"id":"szrYf1YZdMNo","executionInfo":{"status":"ok","timestamp":1714219709939,"user_tz":-180,"elapsed":720,"user":{"displayName":"Kenzy Kourah","userId":"10522561092114236921"}},"outputId":"e8f55424-dd8b-4203-d7a9-62a0d965f03d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   RowNumber  CustomerId   Surname  CreditScore Geography  Gender  Age  \\\n","0          1    15634602  Hargrave          619    France  Female   42   \n","1          2    15647311      Hill          608     Spain  Female   41   \n","2          3    15619304      Onio          502    France  Female   42   \n","3          4    15701354      Boni          699    France  Female   39   \n","4          5    15737888  Mitchell          850     Spain  Female   43   \n","\n","   Tenure    Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n","0       2       0.00              1          1               1   \n","1       1   83807.86              1          0               1   \n","2       8  159660.80              3          1               0   \n","3       1       0.00              2          0               0   \n","4       2  125510.82              1          1               1   \n","\n","   EstimatedSalary  Exited  \n","0        101348.88       1  \n","1        112542.58       0  \n","2        113931.57       1  \n","3         93826.63       0  \n","4         79084.10       0  "],"text/html":["\n","  <div id=\"df-c1eb911c-d0f7-4741-8686-aea62decfee2\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>RowNumber</th>\n","      <th>CustomerId</th>\n","      <th>Surname</th>\n","      <th>CreditScore</th>\n","      <th>Geography</th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>Tenure</th>\n","      <th>Balance</th>\n","      <th>NumOfProducts</th>\n","      <th>HasCrCard</th>\n","      <th>IsActiveMember</th>\n","      <th>EstimatedSalary</th>\n","      <th>Exited</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>15634602</td>\n","      <td>Hargrave</td>\n","      <td>619</td>\n","      <td>France</td>\n","      <td>Female</td>\n","      <td>42</td>\n","      <td>2</td>\n","      <td>0.00</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>101348.88</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>15647311</td>\n","      <td>Hill</td>\n","      <td>608</td>\n","      <td>Spain</td>\n","      <td>Female</td>\n","      <td>41</td>\n","      <td>1</td>\n","      <td>83807.86</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>112542.58</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>15619304</td>\n","      <td>Onio</td>\n","      <td>502</td>\n","      <td>France</td>\n","      <td>Female</td>\n","      <td>42</td>\n","      <td>8</td>\n","      <td>159660.80</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113931.57</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>15701354</td>\n","      <td>Boni</td>\n","      <td>699</td>\n","      <td>France</td>\n","      <td>Female</td>\n","      <td>39</td>\n","      <td>1</td>\n","      <td>0.00</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>93826.63</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>15737888</td>\n","      <td>Mitchell</td>\n","      <td>850</td>\n","      <td>Spain</td>\n","      <td>Female</td>\n","      <td>43</td>\n","      <td>2</td>\n","      <td>125510.82</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>79084.10</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c1eb911c-d0f7-4741-8686-aea62decfee2')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c1eb911c-d0f7-4741-8686-aea62decfee2 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c1eb911c-d0f7-4741-8686-aea62decfee2');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7365d9ed-defc-4de4-82a4-93ccfb385a4e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7365d9ed-defc-4de4-82a4-93ccfb385a4e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7365d9ed-defc-4de4-82a4-93ccfb385a4e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 10000,\n  \"fields\": [\n    {\n      \"column\": \"RowNumber\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2886,\n        \"min\": 1,\n        \"max\": 10000,\n        \"num_unique_values\": 10000,\n        \"samples\": [\n          6253,\n          4685,\n          1732\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CustomerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 71936,\n        \"min\": 15565701,\n        \"max\": 15815690,\n        \"num_unique_values\": 10000,\n        \"samples\": [\n          15687492,\n          15736963,\n          15721730\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Surname\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2932,\n        \"samples\": [\n          \"McGuirk\",\n          \"Torkelson\",\n          \"Rapuluchukwu\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CreditScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 96,\n        \"min\": 350,\n        \"max\": 850,\n        \"num_unique_values\": 460,\n        \"samples\": [\n          754,\n          533,\n          744\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Geography\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"France\",\n          \"Spain\",\n          \"Germany\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Male\",\n          \"Female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 18,\n        \"max\": 92,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          61,\n          42\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tenure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 10,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          6,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Balance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62397.405202385955,\n        \"min\": 0.0,\n        \"max\": 250898.09,\n        \"num_unique_values\": 6382,\n        \"samples\": [\n          117707.18,\n          133050.97\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumOfProducts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HasCrCard\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IsActiveMember\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EstimatedSalary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 57510.49281769816,\n        \"min\": 11.58,\n        \"max\": 199992.48,\n        \"num_unique_values\": 9999,\n        \"samples\": [\n          100809.99,\n          95273.73\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Exited\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":3}],"source":["from google.colab import drive\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline\n","\n","#pd.option.display.float_format='{:.2f}'.format\n","\n","file_path= '/content/drive/MyDrive/Churn_Modelling.csv'\n","\n","df= pd.read_csv(file_path)\n","df.head()"]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Assuming 'churn' is the column representing churn in your DataFrame\n","# You can replace 'churn' with the actual column name in your DataFrame\n","\n","# Calculate value counts of churn\n","churn_counts = df['Exited'].value_counts()\n","\n","# Plot the value counts in a bar plot\n","churn_counts.plot(kind='bar', color=['blue', 'red'])\n","\n","# Add labels and title\n","plt.title('Exited Value Counts')\n","plt.xlabel('Exited')\n","plt.ylabel('Count')\n","\n","# Add annotations for each bar\n","for i, count in enumerate(churn_counts):\n","    plt.text(i, count + 0.1, str(count), ha='center', va='bottom')\n","\n","# Show the plot\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":467},"id":"FYvK8eEEYh3R","executionInfo":{"status":"ok","timestamp":1714219972542,"user_tz":-180,"elapsed":729,"user":{"displayName":"Kenzy Kourah","userId":"10522561092114236921"}},"outputId":"38741fc6-31c4-4799-8021-056da466f177"},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["if df.isnull().any().any():\n","    print(\"There are missing values in the dataset.\")\n","else:\n","    print(\"There are no missing values in the dataset.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BYqKQL01icOd","executionInfo":{"status":"ok","timestamp":1714219974891,"user_tz":-180,"elapsed":283,"user":{"displayName":"Kenzy Kourah","userId":"10522561092114236921"}},"outputId":"203f153c-9596-46e4-a541-1776c6eb544d"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["There are no missing values in the dataset.\n"]}]},{"cell_type":"code","source":["# Check for duplicates\n","duplicates = df.duplicated()\n","\n","# Print the number of duplicate rows\n","print(\"Number of duplicate rows:\", duplicates.sum())\n","\n","# Optionally, you can print the duplicate rows themselves\n","duplicate_rows = df[duplicates]\n","print(\"Duplicate rows:\")\n","print(duplicate_rows)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4myVMyKz3pww","executionInfo":{"status":"ok","timestamp":1714219975853,"user_tz":-180,"elapsed":5,"user":{"displayName":"Kenzy Kourah","userId":"10522561092114236921"}},"outputId":"351b62a1-9842-400f-ad2f-aceda010568e"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of duplicate rows: 0\n","Duplicate rows:\n","Empty DataFrame\n","Columns: [RowNumber, CustomerId, Surname, CreditScore, Geography, Gender, Age, Tenure, Balance, NumOfProducts, HasCrCard, IsActiveMember, EstimatedSalary, Exited]\n","Index: []\n"]}]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NX3QN7sgk5Lj","executionInfo":{"status":"ok","timestamp":1713803752770,"user_tz":-120,"elapsed":3,"user":{"displayName":"Kenzy Kourah","userId":"10522561092114236921"}},"outputId":"bf3ac246-0081-46b1-a086-a180c7885653"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 10000 entries, 0 to 9999\n","Data columns (total 14 columns):\n"," #   Column           Non-Null Count  Dtype  \n","---  ------           --------------  -----  \n"," 0   RowNumber        10000 non-null  int64  \n"," 1   CustomerId       10000 non-null  int64  \n"," 2   Surname          10000 non-null  object \n"," 3   CreditScore      10000 non-null  int64  \n"," 4   Geography        10000 non-null  object \n"," 5   Gender           10000 non-null  object \n"," 6   Age              10000 non-null  int64  \n"," 7   Tenure           10000 non-null  int64  \n"," 8   Balance          10000 non-null  float64\n"," 9   NumOfProducts    10000 non-null  int64  \n"," 10  HasCrCard        10000 non-null  int64  \n"," 11  IsActiveMember   10000 non-null  int64  \n"," 12  EstimatedSalary  10000 non-null  float64\n"," 13  Exited           10000 non-null  int64  \n","dtypes: float64(2), int64(9), object(3)\n","memory usage: 1.1+ MB\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Assuming 'df' contains your DataFrame\n","sel_att= ['Geography','Gender','Age','Tenure',\n","         'Balance','NumOfProducts','HasCrCard','IsActiveMember','EstimatedSalary'\n","         ,'Exited','CreditScore']\n","df = df[sel_att]\n","\n","# Perform one-hot encoding for 'Gender' column\n","df = pd.get_dummies(df, columns=['Gender'])\n","\n","# Print the DataFrame to verify the changes\n","print(df.head())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IFWF1nmWkxb-","executionInfo":{"status":"ok","timestamp":1714219976791,"user_tz":-180,"elapsed":1,"user":{"displayName":"Kenzy Kourah","userId":"10522561092114236921"}},"outputId":"b3e325b3-48a8-458e-9f91-fe36f918c587"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["  Geography  Age  Tenure    Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n","0    France   42       2       0.00              1          1               1   \n","1     Spain   41       1   83807.86              1          0               1   \n","2    France   42       8  159660.80              3          1               0   \n","3    France   39       1       0.00              2          0               0   \n","4     Spain   43       2  125510.82              1          1               1   \n","\n","   EstimatedSalary  Exited  CreditScore  Gender_Female  Gender_Male  \n","0        101348.88       1          619           True        False  \n","1        112542.58       0          608           True        False  \n","2        113931.57       1          502           True        False  \n","3         93826.63       0          699           True        False  \n","4         79084.10       0          850           True        False  \n"]}]},{"cell_type":"code","source":["#displaying the unique values in each categorial attribute\n","categorical_col = []\n","for column in df.columns:\n","    if df[column].dtype == object:\n","        categorical_col.append(column)\n","        print(f\"{column} : {df[column].unique()}\")\n","        print(\"====================================\")\n","\n","categorical_features = categorical_col.copy()"],"metadata":{"id":"n6cw5NhCljgn","executionInfo":{"status":"ok","timestamp":1714219979098,"user_tz":-180,"elapsed":286,"user":{"displayName":"Kenzy Kourah","userId":"10522561092114236921"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"ea705f74-2c15-438e-fc03-d22a8e255a4e"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Geography : ['France' 'Spain' 'Germany']\n","====================================\n"]}]},{"cell_type":"code","source":["df['Geography'] = pd.Categorical(df['Geography'], categories=['France' 'Spain' 'Germany'], ordered=True)\n","df['Geography'] = df['Geography'].cat.codes\n","\n","df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hNCK_zYEledQ","executionInfo":{"status":"ok","timestamp":1714219979792,"user_tz":-180,"elapsed":2,"user":{"displayName":"Kenzy Kourah","userId":"10522561092114236921"}},"outputId":"969c5646-0f7d-49bc-eeb6-62696bf44177"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 10000 entries, 0 to 9999\n","Data columns (total 12 columns):\n"," #   Column           Non-Null Count  Dtype  \n","---  ------           --------------  -----  \n"," 0   Geography        10000 non-null  int8   \n"," 1   Age              10000 non-null  int64  \n"," 2   Tenure           10000 non-null  int64  \n"," 3   Balance          10000 non-null  float64\n"," 4   NumOfProducts    10000 non-null  int64  \n"," 5   HasCrCard        10000 non-null  int64  \n"," 6   IsActiveMember   10000 non-null  int64  \n"," 7   EstimatedSalary  10000 non-null  float64\n"," 8   Exited           10000 non-null  int64  \n"," 9   CreditScore      10000 non-null  int64  \n"," 10  Gender_Female    10000 non-null  bool   \n"," 11  Gender_Male      10000 non-null  bool   \n","dtypes: bool(2), float64(2), int64(7), int8(1)\n","memory usage: 732.5 KB\n"]}]},{"cell_type":"code","source":["#Univariate Analysis\n","\n","from sklearn.feature_selection import SelectKBest, f_classif\n","import pandas as pd\n","\n","# Separate features (X) and target variable (y)\n","X = df.drop(columns=['Exited'])\n","y = df['Exited']\n","\n","k = 3\n","\n","selector = SelectKBest(score_func=f_classif, k=k)\n","X_selected = selector.fit_transform(X, y)\n","\n","# Get the indices of the selected features\n","selected_indices = selector.get_support(indices=True)\n","\n","# Get the names of the selected features\n","selected_features = X.columns[selected_indices]\n","\n","# Print the names of the selected features\n","print(\"Selected Features:\")\n","print(selected_features)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qUxsEN5LqWoF","executionInfo":{"status":"ok","timestamp":1714219981914,"user_tz":-180,"elapsed":625,"user":{"displayName":"Kenzy Kourah","userId":"10522561092114236921"}},"outputId":"5991e471-6c8d-43d6-a6cc-e8e7e73a35d6"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Selected Features:\n","Index(['Age', 'Balance', 'IsActiveMember'], dtype='object')\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/feature_selection/_univariate_selection.py:112: UserWarning: Features [0] are constant.\n","  warnings.warn(\"Features %s are constant.\" % constant_features_idx, UserWarning)\n","/usr/local/lib/python3.10/dist-packages/sklearn/feature_selection/_univariate_selection.py:113: RuntimeWarning: invalid value encountered in divide\n","  f = msb / msw\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.feature_selection import RFE\n","from sklearn.ensemble import RandomForestClassifier\n","\n","# Step 1: Import Libraries\n","\n","# Step 2: Prepare Data\n","# Assuming df is your Pandas DataFrame containing the dataset\n","X = df.drop('Exited', axis=1)  # Features\n","y = df['Exited']  # Target\n","\n","# Step 3: Instantiate Estimator\n","estimator = RandomForestClassifier()  # You can replace this with any appropriate estimator\n","\n","# Step 4: Instantiate RFE\n","rfe = RFE(estimator, n_features_to_select=3)  # Selecting 5 features\n","\n","# Step 5: Fit RFE\n","rfe.fit(X, y)\n","\n","# Step 6: Get Selected Features\n","selected_features = X.columns[rfe.support_]\n","\n","print(\"Selected Features:\", selected_features.tolist())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xIFofNZM2jtj","executionInfo":{"status":"ok","timestamp":1714220211339,"user_tz":-180,"elapsed":19807,"user":{"displayName":"Kenzy Kourah","userId":"10522561092114236921"}},"outputId":"f6f7cbaf-8bb2-4376-89a6-d35d7efe4afa"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Selected Features: ['Age', 'EstimatedSalary', 'CreditScore']\n"]}]},{"cell_type":"code","source":["feature_cols = ['Age', 'EstimatedSalary', 'CreditScore']\n","X = df[feature_cols]\n","y = df['Exited']\n","\n","df.head()"],"metadata":{"id":"9-Ba_17vrFqp","colab":{"base_uri":"https://localhost:8080/","height":226},"executionInfo":{"status":"ok","timestamp":1714219985834,"user_tz":-180,"elapsed":285,"user":{"displayName":"Kenzy Kourah","userId":"10522561092114236921"}},"outputId":"70342c20-56ec-4f5f-f427-22726a9d8ed7"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Geography  Age  Tenure    Balance  NumOfProducts  HasCrCard  \\\n","0         -1   42       2       0.00              1          1   \n","1         -1   41       1   83807.86              1          0   \n","2         -1   42       8  159660.80              3          1   \n","3         -1   39       1       0.00              2          0   \n","4         -1   43       2  125510.82              1          1   \n","\n","   IsActiveMember  EstimatedSalary  Exited  CreditScore  Gender_Female  \\\n","0               1        101348.88       1          619           True   \n","1               1        112542.58       0          608           True   \n","2               0        113931.57       1          502           True   \n","3               0         93826.63       0          699           True   \n","4               1         79084.10       0          850           True   \n","\n","   Gender_Male  \n","0        False  \n","1        False  \n","2        False  \n","3        False  \n","4        False  "],"text/html":["\n","  <div id=\"df-13735f50-c06c-4324-ac45-93ba38da076b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Geography</th>\n","      <th>Age</th>\n","      <th>Tenure</th>\n","      <th>Balance</th>\n","      <th>NumOfProducts</th>\n","      <th>HasCrCard</th>\n","      <th>IsActiveMember</th>\n","      <th>EstimatedSalary</th>\n","      <th>Exited</th>\n","      <th>CreditScore</th>\n","      <th>Gender_Female</th>\n","      <th>Gender_Male</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-1</td>\n","      <td>42</td>\n","      <td>2</td>\n","      <td>0.00</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>101348.88</td>\n","      <td>1</td>\n","      <td>619</td>\n","      <td>True</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-1</td>\n","      <td>41</td>\n","      <td>1</td>\n","      <td>83807.86</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>112542.58</td>\n","      <td>0</td>\n","      <td>608</td>\n","      <td>True</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-1</td>\n","      <td>42</td>\n","      <td>8</td>\n","      <td>159660.80</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113931.57</td>\n","      <td>1</td>\n","      <td>502</td>\n","      <td>True</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-1</td>\n","      <td>39</td>\n","      <td>1</td>\n","      <td>0.00</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>93826.63</td>\n","      <td>0</td>\n","      <td>699</td>\n","      <td>True</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-1</td>\n","      <td>43</td>\n","      <td>2</td>\n","      <td>125510.82</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>79084.10</td>\n","      <td>0</td>\n","      <td>850</td>\n","      <td>True</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-13735f50-c06c-4324-ac45-93ba38da076b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-13735f50-c06c-4324-ac45-93ba38da076b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-13735f50-c06c-4324-ac45-93ba38da076b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-18e5030d-44f6-419e-a01a-3a1e01c70e25\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-18e5030d-44f6-419e-a01a-3a1e01c70e25')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-18e5030d-44f6-419e-a01a-3a1e01c70e25 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 10000,\n  \"fields\": [\n    {\n      \"column\": \"Geography\",\n      \"properties\": {\n        \"dtype\": \"int8\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 18,\n        \"max\": 92,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          61\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tenure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 10,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Balance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62397.405202385955,\n        \"min\": 0.0,\n        \"max\": 250898.09,\n        \"num_unique_values\": 6382,\n        \"samples\": [\n          117707.18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumOfProducts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HasCrCard\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IsActiveMember\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EstimatedSalary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 57510.49281769816,\n        \"min\": 11.58,\n        \"max\": 199992.48,\n        \"num_unique_values\": 9999,\n        \"samples\": [\n          100809.99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Exited\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CreditScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 96,\n        \"min\": 350,\n        \"max\": 850,\n        \"num_unique_values\": 460,\n        \"samples\": [\n          754\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender_Female\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender_Male\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["from sklearn.model_selection import cross_val_score\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.model_selection import cross_val_predict\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","from sklearn.metrics import roc_auc_score\n","\n","X = df.drop('Exited', axis=1)\n","y = df['Exited']\n","X_train, X_test, y_train, y_test_cv1 = train_test_split(df.drop('Exited',axis=1),\n","                                             df['Exited'], test_size=0.235,\n","                                                   random_state=1)\n","\n","dt_classifier = DecisionTreeClassifier()\n","dt_classifier.fit(X_train, y_train)\n","\n","y_pred = dt_classifier.predict(X_test)\n","accuracy = accuracy_score(y_test_cv1, y_pred)\n","classification_report_output = classification_report(y_test_cv1, y_pred)\n","num_folds = 5\n","\n","# Evaluate model performance\n","accuracy = accuracy_score(y_test_cv1, y_pred)\n","conf_matrix = confusion_matrix(y_test_cv1, y_pred)\n","class_report = classification_report(y_test_cv1, y_pred)\n","\n","# Perform cross-validation for Decision Tree\n","dt_scores = cross_val_score(dt_classifier, X, y, cv=num_folds)\n","\n","\n","accuracy = accuracy_score(y_test_cv1, y_pred)\n","classification_report_output = classification_report(y_test_cv1, y_pred)\n","\n","\n","# Perform cross-validation predictions for Decision Tree\n","y_pred_cv1= cross_val_predict(dt_classifier, X, y, cv=num_folds)\n","\n","# Calculate confusion matrix\n","conf_matrix_cv = confusion_matrix(y, y_pred_cv1)\n","\n","# Calculate classification report after cross-validation\n","class_report_cv_DT = classification_report(y, y_pred_cv1)\n","\n","auc = roc_auc_score(y_test_cv1, y_pred)\n","auc_cv = roc_auc_score(y, y_pred_cv1)\n","\n","# Print confusion matrix after CV\n","print(\"Confusion Matrix after cross-validation:\")\n","print(conf_matrix_cv)\n","\n","# Print classification report after CV\n","print(\"Classification Report after cross-validation:\")\n","print(class_report_cv_DT)\n","print(\"Decision Tree Cross-Validation Scores:\", dt_scores)\n","print(\"Mean Decision Tree Accuracy:\", dt_scores.mean())\n","\n","print(\"AUC after cross-validation:\", auc_cv)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uH6XgfCkw5hN","executionInfo":{"status":"ok","timestamp":1714220220861,"user_tz":-180,"elapsed":1390,"user":{"displayName":"Kenzy Kourah","userId":"10522561092114236921"}},"outputId":"c6840711-a521-41f6-b9ab-f9053354fd0a"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix after cross-validation:\n","[[6805 1158]\n"," [1046  991]]\n","Classification Report after cross-validation:\n","              precision    recall  f1-score   support\n","\n","           0       0.87      0.85      0.86      7963\n","           1       0.46      0.49      0.47      2037\n","\n","    accuracy                           0.78     10000\n","   macro avg       0.66      0.67      0.67     10000\n","weighted avg       0.78      0.78      0.78     10000\n","\n","Decision Tree Cross-Validation Scores: [0.774  0.7885 0.7665 0.794  0.7695]\n","Mean Decision Tree Accuracy: 0.7785\n","AUC after cross-validation: 0.6705385875555643\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split, cross_val_score\n","from sklearn.metrics import accuracy_score, confusion_matrix, classification_report,  roc_auc_score\n","from xgboost import XGBClassifier\n","\n","# Separate features and target variable\n","X = df.drop(columns=['Exited'])\n","y = df['Exited']\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.235, random_state=1)\n","\n","# Initialize XGBoost classifier\n","xgb_classifier = XGBClassifier()\n","\n","# Perform cross-validation\n","cv_scores = cross_val_score(xgb_classifier, X_train, y_train, cv=5)\n","\n","# Train the classifier\n","xgb_classifier.fit(X_train, y_train)\n","\n","# Predict on the testing set\n","y_pred = xgb_classifier.predict(X_test)\n","\n","# Calculate classification report\n","class_report = classification_report(y_test, y_pred)\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_test, y_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# Calculate AUC\n","auc = roc_auc_score(y_test, y_pred)\n","\n","# Print cross-validation scores\n","print(\"Cross-Validation Scores:\", cv_scores)\n","print(\"Mean Cross-Validation Score:\", cv_scores.mean())\n","\n","# Confusion matrix\n","conf_matrix = confusion_matrix(y_test, y_pred)\n","print(\"Confusion Matrix:\")\n","print(conf_matrix)\n","\n","# Print classification report\n","print(\"Classification Report:\")\n","print(class_report)\n","\n","# Print AUC\n","print(\"AUC:\", auc)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"O9eLb6ZZxeOH","executionInfo":{"status":"ok","timestamp":1714220309505,"user_tz":-180,"elapsed":4982,"user":{"displayName":"Kenzy Kourah","userId":"10522561092114236921"}},"outputId":"ed5fdf38-3f00-4b19-c73b-11a33a9a75fe"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.8523404255319149\n","Cross-Validation Scores: [0.84313725 0.83921569 0.83529412 0.84183007 0.83856209]\n","Mean Cross-Validation Score: 0.8396078431372549\n","Confusion Matrix:\n","[[1779   88]\n"," [ 259  224]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.87      0.95      0.91      1867\n","           1       0.72      0.46      0.56       483\n","\n","    accuracy                           0.85      2350\n","   macro avg       0.80      0.71      0.74      2350\n","weighted avg       0.84      0.85      0.84      2350\n","\n","AUC: 0.7083168378317537\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import cross_val_score, cross_val_predict\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_auc_score\n","\n","X = df.drop('Exited', axis=1)\n","y = df['Exited']\n","X_train, X_test, y_train, y_test_cv2 = train_test_split(X, y, test_size=0.235, random_state=1)\n","\n","rf_classifier = RandomForestClassifier(n_estimators=100)\n","rf_classifier.fit(X_train, y_train)\n","y_pred = rf_classifier.predict(X_test)\n","num_folds = 5\n","\n","# Evaluate model performance\n","accuracy = accuracy_score(y_test_cv2, y_pred)\n","conf_matrix = confusion_matrix(y_test_cv2, y_pred)\n","class_report = classification_report(y_test_cv2, y_pred)\n","\n","# Perform cross-validation for Random Forest\n","rf_scores = cross_val_score(rf_classifier, X, y, cv=num_folds)\n","\n","# Perform cross-validation predictions for Random Forest\n","y_pred_cv2 = cross_val_predict(rf_classifier, X, y, cv=num_folds)\n","\n","# Calculate confusion matrix\n","conf_matrix_cv = confusion_matrix(y, y_pred_cv2)\n","\n","# Calculate classification report after cross-validation\n","class_report_cv = classification_report(y, y_pred_cv2)\n","\n","# Calculate AUC on the test set\n","auc = roc_auc_score(y_test_cv2, y_pred)\n","\n","# Calculate AUC after cross-validation\n","auc_cv = roc_auc_score(y, y_pred_cv2)\n","\n","# Print confusion matrix after CV\n","print(\"Confusion Matrix after cross-validation:\")\n","print(conf_matrix_cv)\n","\n","# Print classification report after CV\n","print(\"Classification Report after cross-validation:\")\n","print(class_report_cv)\n","\n","print(\"Random Forest Cross-Validation Scores:\", rf_scores)\n","print(\"Mean Random Forest Accuracy:\", rf_scores.mean())\n","\n","# Print AUC on the test set\n","print(\"AUC on Test Set:\", auc)\n","\n","# Print AUC after cross-validation\n","print(\"AUC after cross-validation:\", auc_cv)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bPt2CUxjxJ-0","executionInfo":{"status":"ok","timestamp":1714220557493,"user_tz":-180,"elapsed":22969,"user":{"displayName":"Kenzy Kourah","userId":"10522561092114236921"}},"outputId":"f581cc83-6042-44e8-88cc-1cfa5e5c23c7"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix after cross-validation:\n","[[7657  306]\n"," [1175  862]]\n","Classification Report after cross-validation:\n","              precision    recall  f1-score   support\n","\n","           0       0.87      0.96      0.91      7963\n","           1       0.74      0.42      0.54      2037\n","\n","    accuracy                           0.85     10000\n","   macro avg       0.80      0.69      0.72     10000\n","weighted avg       0.84      0.85      0.84     10000\n","\n","Random Forest Cross-Validation Scores: [0.845  0.8565 0.8545 0.8545 0.8425]\n","Mean Random Forest Accuracy: 0.8506\n","AUC on Test Set: 0.7005193172026735\n","AUC after cross-validation: 0.6923718010723504\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_auc_score\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import train_test_split, cross_val_score\n","import pandas as pd\n","\n","# Assuming df is your DataFrame\n","X = df.drop('Exited', axis=1)\n","y = df['Exited']\n","\n","# Splitting data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.235, random_state=1)\n","\n","# Creating Logistic Regression model\n","lr_model = LogisticRegression(max_iter=1000)\n","\n","# Cross-validation\n","cv_scores = cross_val_score(lr_model, X_train, y_train, cv=5)  # Change cv value as needed\n","\n","# Fit model on the training data\n","lr_model.fit(X_train, y_train)\n","\n","# Make predictions on the test set\n","y_pred = lr_model.predict(X_test)\n","\n","# Evaluate the model\n","accuracy = accuracy_score(y_test, y_pred)\n","conf_matrix = confusion_matrix(y_test, y_pred)\n","class_report = classification_report(y_test, y_pred)\n","\n","# Calculate AUC\n","auc_test = roc_auc_score(y_test, y_pred)\n","\n","# Print evaluation metrics\n","print(\"Cross-Validation Scores:\", cv_scores)\n","print(\"Mean Cross-Validation Score:\", cv_scores.mean())\n","print(\"Confusion Matrix:\")\n","print(conf_matrix)\n","print(\"Classification Report:\")\n","print(class_report)\n","print(\"AUC on Test Set:\", auc_test)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XSP0VUW_pDdO","executionInfo":{"status":"ok","timestamp":1714220626661,"user_tz":-180,"elapsed":1196,"user":{"displayName":"Kenzy Kourah","userId":"10522561092114236921"}},"outputId":"b4c6bb9e-4565-491d-d095-c3441cf6e523"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Cross-Validation Scores: [0.79411765 0.79738562 0.7875817  0.79019608 0.7869281 ]\n","Mean Cross-Validation Score: 0.7912418300653594\n","Confusion Matrix:\n","[[1833   34]\n"," [ 462   21]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.80      0.98      0.88      1867\n","           1       0.38      0.04      0.08       483\n","\n","    accuracy                           0.79      2350\n","   macro avg       0.59      0.51      0.48      2350\n","weighted avg       0.71      0.79      0.72      2350\n","\n","AUC on Test Set: 0.5126336135627955\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, precision_score, recall_score,f1_score\n","\n","DecisionTree_metrics= {\n","    'Accuracy': accuracy_score (y_test1, y_pred1 ),\n","    'Precision': precision_score(y_test1, y_pred1),\n","    'Recall': recall_score (y_test1, y_pred1),\n","    'F1-score': f1_score (y_test1, y_pred1)\n","}\n","\n","rf_metrics={\n","     'Accuracy': accuracy_score (y_test2, y_pred2),\n","    'Precision': precision_score(y_test2, y_pred2),\n","    'Recall': recall_score (y_test2, y_pred2),\n","    'F1-score': f1_score (y_test2, y_pred2)\n","\n","}\n","\n","XGBoost_metrics={\n","     'Accuracy': accuracy_score (y_test3,y_pred3),\n","     'Precision': precision_score(y_test3,y_pred3),\n","     'Recall': recall_score (y_test3,y_pred3),\n","     'F1-score': f1_score (y_test3,y_pred3)\n","\n","}\n","\n","metrics= list(DecisionTree_metrics.keys())\n","DecisionTree_values=list(DecisionTree_metrics.values())\n","XGBoost_values=list(XGBoost_metrics.values())\n","rf_values=list(rf_metrics.values())\n","\n","\n","bar_width=0.2\n","x = np.arange(len(metrics))\n","plt.figure(figsize=(10, 6))\n","plt.bar(x - bar_width, DecisionTree_values, width=bar_width, label='Decision Trees', color='blue')\n","plt.bar(x, XGBoost_values, width=bar_width, label='random forest', color='red')\n","plt.bar(x + bar_width, rf_values, width=bar_width, label='XGBoost ', color='orange')\n","\n","# Set the labels, title, and legend\n","plt.xlabel('Metrics')\n","plt.ylabel('Values')\n","plt.title('Comparison of Metrics by Model')\n","plt.xticks(x, metrics)\n","plt.legend()\n","\n","# Show the plot\n","plt.tight_layout()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":402},"id":"tS1Qwe0bxXQ7","executionInfo":{"status":"ok","timestamp":1713803772506,"user_tz":-120,"elapsed":407,"user":{"displayName":"Kenzy Kourah","userId":"10522561092114236921"}},"outputId":"6403b793-1328-4bd0-a280-77b226afefda"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAA90AAAJOCAYAAACqS2TfAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABmYklEQVR4nO3deVhV5f7+8XuDzKOKAnpQnGcRccjMIaPQ1NRMSU2UkrK0QbLBBnGoaNK0HOurYuaUaWZpTqRW6skpS3PIGSsBrRTBBIX1+8Of+7hjEJTFFn2/rmtd5+xnPc9an7X3Xsm912QxDMMQAAAAAAAodg72LgAAAAAAgJsVoRsAAAAAAJMQugEAAAAAMAmhGwAAAAAAkxC6AQAAAAAwCaEbAAAAAACTELoBAAAAADAJoRsAAAAAAJMQugEAAAAAMAmhGwCAK1gsFo0aNcreZVy3OXPmqG7dunJycpKvr6+9yymyUaNGyWKxlNj6goOD1aVLlxJbX0lr37692rdvf01jg4ODNXDgwGKtBwBuJYRuAICNQ4cO6bHHHlP16tXl6uoqb29vtW7dWhMnTtQ///xj7/JQCPv27dPAgQNVo0YNffTRR/rwww/z7Xs53Do4OOj48eO55qelpcnNzU0Wi0VDhw69pnreeOMNLV269JrG3kyOHj0qi8Uii8Wi1157Lc8+/fr1k8VikaenZwlXBwAwC6EbAGC1fPlyNWrUSJ9++qm6du2qDz74QPHx8apSpYqee+45Pf300/Yu0XT//POPXnnlFXuXcV3Wr1+vnJwcTZw4UQMHDlTv3r2vOsbFxUXz58/P1b5kyZLrrudaQvcrr7xy0/7I4+rqmud7nZGRoS+++EKurq52qAoAYBZCNwBAknTkyBE9+OCDqlq1qvbs2aOJEycqJiZGQ4YM0fz587Vnzx41aNDA3mWaIicnR+fPn5d0KRCVKVPGzhVdn9TUVEkq0mnl9957b55BcN68eercuXNxlXZVGRkZkqQyZcrctOHz3nvv1Z49e/TTTz/ZtH/xxRfKysrS3XffbafKAABmIHQDACRJb7/9ttLT0zVjxgwFBgbmml+zZk2bI90XL17U2LFjVaNGDbm4uCg4OFgvvfSSMjMzbcZdvlZ2/fr1atasmdzc3NSoUSOtX79e0qUjqY0aNZKrq6vCwsL0448/2owfOHCgPD09dfjwYUVERMjDw0OVKlXSmDFjZBiGTd93331Xt99+u8qXLy83NzeFhYXps88+y7Utl0+Vnjt3rho0aCAXFxetXLnSOu/Ka7rPnj2rZ555RsHBwXJxcVHFihV19913a8eOHTbLXLRokcLCwuTm5iY/Pz899NBD+v333/Pclt9//13du3eXp6enKlSooOHDhys7OzufT8bWlClTrDVXqlRJQ4YM0enTp23e77i4OElShQoVCn2Net++fbVz507t27fP2pacnKxvvvlGffv2zXNMZmam4uLiVLNmTbm4uCgoKEjPP/+8zXfAYrEoIyNDs2fPtp5affn64Muntu/Zs0d9+/ZV2bJldccdd9jM+7dPPvlELVq0kLu7u8qWLau2bdtq9erV1vnbtm1TRESE/Pz85ObmpmrVqunhhx++6vZftnr1ajVp0kSurq6qX7++zZH+w4cPy2Kx6L333ss1btOmTbJYLHn+cPFvrVq1UrVq1TRv3jyb9rlz56pjx44qV65cnuOu9tlf9uGHH6pGjRpyc3NTixYt9N133+W5vMJ8fgCA60foBgBIkr788ktVr15dt99+e6H6Dxo0SCNHjlTTpk313nvvqV27doqPj9eDDz6Yq+/BgwfVt29fde3aVfHx8fr777/VtWtXzZ07V8OGDdNDDz2k0aNH69ChQ+rdu7dycnJsxmdnZ6tjx47y9/fX22+/rbCwMMXFxVnD5WUTJ05UaGioxowZozfeeENlypRRr169tHz58lw1ffPNNxo2bJgiIyM1ceJEBQcH57mdgwcP1tSpU9WzZ09NmTJFw4cPl5ubm/bu3Wvtk5CQoN69e8vR0VHx8fGKiYnRkiVLdMcdd+QKRdnZ2YqIiFD58uX17rvvql27dho3blyB111fNmrUKA0ZMkSVKlXSuHHj1LNnT02fPl333HOPLly4IEmaMGGCevToIUmaOnWq5syZo/vvv/+qy27btq3+85//2ATBhQsXytPTM88j3Tk5Obrvvvv07rvvWi9F6N69u9577z1FRkZa+82ZM0cuLi5q06aN5syZozlz5uixxx6zWVavXr107tw5vfHGG4qJicm3xtGjR6t///5ycnLSmDFjNHr0aAUFBembb76RdOkI/z333KOjR4/qxRdf1AcffKB+/frpv//971W3X5IOHDigyMhIderUSfHx8dbvz5o1ayRJ1atXV+vWrTV3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ckTVqlWTq6vr/2aU9N+nRYxY7du3V1pamnbs2FFgv88++0yDBw/WqVOnJF060h0dHa2DBw+qRo0aki4d3R0zZoySk5MlSZUqVdKwYcP03HPPSZIuXryoatWqKSwsTEuXLlVGRobKli2rhIQE9e3bV5J04cIFBQcH65lnntFzzz2n9evX684779TatWt11113SZLefPNNjRgxQocOHVL16tUlSYMHD9bRo0e1cuXKPOs/ffq0ypYtq3Xr1ql9+/aSpH79+unkyZNavXq1td/zzz+v5cuX65dffpF06Uh3aGiozY8FgwYNkqOjo6ZPn25t+/7779WuXTtlZGRoxYoVio6O1m+//WY9wv7v97xJkyaaMGFCge95vt8pFT5bcqQbAAAAAOwsLCwsV9vlkFu5cmV5eXmpf//++vPPP21O4XZ3d7cGbkkKDAxUamqqJOnMmTM6ceKEWrZsaZ1fpkwZNWvWzPr60KFDunDhglq3bm1tc3JyUosWLbR3716beho3bmz9//7+/nJ3d7cG7sttl9ddWHv37rVZtyS1bt1aBw4cUHZ2trXtypol6aefflJCQoI8PT2tU0REhHJycnTkyBHdfffdqlq1qqpXr67+/ftr7ty5+Z76bjZCNwAAAADYmYeHh83ro0ePqkuXLmrcuLEWL16s7du3a/LkyZIu3UjsMicnJ5txFosl1zXbxeXKdVksljzXnZOTY8q6//3+pKen67HHHtPOnTut008//aQDBw6oRo0a8vLy0o4dOzR//nwFBgZq5MiRCgkJ0enTp02pryCEbgAAAAC4wWzfvl05OTkaN26cbrvtNtWuXVt//PFHkZbh4+OjwMBA/fDDD9a2ixcvavv27dbXNWrUsF5LftmFCxe0detW1a9f//o35Crq1atns25J2rhxo2rXri1HR8d8xzVt2lR79uxRzZo1c02X72xepkwZhYeH6+2339bPP/+so0eP6ptvvpEkOTs72xxJNxOPDAMAAACAG0zNmjV14cIFffDBB+ratavNDdaK4umnn9abb76pWrVqqW7duho/frzN0V4PDw89/vjjeu6551SuXDlVqVJFb7/9ts6dO6dHHnmkGLcob88++6yaN2+usWPHKjIyUps3b9akSZM0ZcqUAse98MILuu222zR06FANGjRIHh4e2rNnj9asWaNJkybpq6++0uHDh9W2bVuV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5NB9zz33aMKECdbXFotF6enpiouL07333luctQEAAAAAUKoV+fTycePGKSIiQvXr19f58+fVt29fHThwQH5+fpo/f74ZNQIAANz8LBZ7V3DtDMPeFQDADavIofs///mPfvrpJy1YsEA///yz0tPT9cgjj6hfv342N1YDAAAAAOBWV+TQLUllypTRQw89VNy1AAAAAABwUyly6P74448LnB8VFXXNxQAAAAAAcDMpcuh++umnbV5fuHBB586dk7Ozs9zd3QndAAAAAAD8f0W+e/nff/9tM6Wnp2v//v264447uJEaAAAAAABXKHLozkutWrX05ptv5joKDgAAAADAraxYQrd06eZqf/zxR3EtDgAAAACAUq/I13QvW7bM5rVhGDpx4oQmTZqk1q1bF1thAAAAAACUdkUO3d27d7d5bbFYVKFCBXXo0EHjxo0rrroAAAAAACj1ihy6c3JyzKgDAAAAAICbTrFd0w0AAAAAAGwV6kh3bGxsoRc4fvz4ay4GAAAAAICbSaFC948//liohVkslusqBgAAAACAm0mhQve6devMrgMAAAAAgJtOkW+kBgAAANiYV0rPduxr2LsCALeAawrd27Zt06effqqkpCRlZWXZzFuyZEmxFAYAAAAAQGlX5LuXL1iwQLfffrv27t2rzz//XBcuXNAvv/yib775Rj4+PmbUCAAAAABAqVTk0P3GG2/ovffe05dffilnZ2dNnDhR+/btU+/evVWlShUzagQAAAAAoFQqcug+dOiQOnfuLElydnZWRkaGLBaLhg0bpg8//LDYCwQAAAAAoLQqcuguW7aszp49K0mqXLmydu/eLUk6ffq0zp07V7zVAQAAAABQihU6dF8O123bttWaNWskSb169dLTTz+tmJgY9enTR3fddZc5VQIAAAAAUAoV+u7ljRs3VvPmzdW9e3f16tVLkvTyyy/LyclJmzZtUs+ePfXKK6+YVigAAAAAAKVNoUP3hg0bNGvWLMXHx+v1119Xz549NWjQIL344otm1gcAAAAAQKlV6NPL27Rpo5kzZ+rEiRP64IMPdPToUbVr1061a9fWW2+9peTkZDPrBAAAAACg1CnyjdQ8PDwUHR2tDRs26Ndff1WvXr00efJkValSRffdd58ZNQIAAAAAUCoVOXRfqWbNmnrppZf0yiuvyMvLS8uXLy+uugAAAAAAKPUK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2w5JBnCNbr/9dmPChAmGYRjGhQsXDD8/P2PdunWGYRhGq1atjH79+uU5bv/+/YYkY82aNXnOnzVrluHj42PT9vnnnxtXfl3j4uIMJycnIzU1tcAaT548aUgydu3aZRiGYUyfPt3w8vIy/vzzzzz7L1y40Chbtqxx/vx5wzAMY/v27YbFYjGOHDlS4HqAG82AAQOMbt26GYZhGDk5OcaaNWsMFxcXY/jw4caAAQMMf39/IzMz09p/zpw5Rp06dYycnBxrW2ZmpuHm5masWrXKMAzDqFSpkvHyyy/nu05Jxueff24YhmE8+eSTRocOHWyWl1/fDz/80ChbtqyRnp5unb98+XLDwcHBSE5Otm5P1apVjYsXL1r79OrVy4iMjCz8mwKUMgMGDDAcHR0NDw8Pw8XFxZBkODg4GJ999plx/vx5w93d3di0aZPNmEceecTo06ePYRiGMWLECKNatWpGVlZWodaXnZ1teHl5GV9++aW17cp99ciRI4Yk48cffyyW7QNuZFfuf5enBx54IFe/K/eRgowbN86oXbt2nvvj1f42fumll3L9Gz158mTD09PTyM7ONgzDMNq1a2eEhobajBs7dqxxzz332LQdP37ckGTs37//qjWj+HDoDtdk//792rJli/r06SNJKlOmjCIjI62nwezcuVN33XVXnmN37twpR0dHtWvX7rpqqFq1qipUqGDTduDAAfXp00fVq1eXt7e39chaUlKSdd2hoaEqV65cnsvs3r27HB0d9fnnn0u6dKr7nXfeme8ROuBG9tVXX8nT01Ourq7q1KmTIiMjNWrUKElSo0aNrEfLJOmnn37SwYMH5eXlJU9PT3l6eqpcuXI6f/68Dh06pNTUVP3xxx/57tf/NnDgQO3cuVN16tTRU089pdWrV+fbd+/evQoJCZGHh4e1rXXr1srJydH+/futbQ0aNJCjo6P1dWBgoFJTUwv7dgCl0p133qmdO3fqhx9+0IABAxQdHa2ePXvq4MGDOnfunO6++27rPuvp6amPP/7Yevr4zp071aZNGzk5OeW57JSUFMXExKhWrVry8fGRt7e30tPTrf9mAre6y/vf5en9998v1Lg33njDZr9MSkpSr1699M8//6h69eqKiYnR559/bj3r5Gp/G+/du1etWrWyudSydevWSk9P12+//WZtCwsLsxn3008/ad26dTa11K1bV5JyXX4Jc5WxdwEonWbMmKGLFy+qUqVK1jbDMOTi4qJJkybJzc0t37EFzZMkBwcH62nql+V13eaVf6Bf1rVrV1WtWlUfffSRKlWqpJycHDVs2NB6euzV1u3s7KyoqCjNmjVL999/v+bNm6eJEycWOAa4Ud15552aOnWqnJ2dValSJZUp87//5P97/0lPT1dYWJjmzp2bazkVKlQo8uUVTZs21ZEjR/T1119r7dq16t27t8LDw3Ndb1oU/w4OFouFey3gpufh4WG9jGPmzJkKCQnRjBkz1LBhQ0mXLueqXLmyzZjLNym82r95AwYM0J9//qmJEyeqatWqcnFxUatWrbgBE/D/Xbn/FcXgwYNtTuG+/G/w/v37tXbtWq1Zs0ZPPPGE3nnnHW3YsOGq+2pR6r1Senq6unbtqrfeeitX38DAwGJZJwqH0I0iu3jxoj7++GONGzdO99xzj8287t27a/78+WrcuLESExMVHR2da3yjRo2Uk5OjDRs2KDw8PNf8ChUq6OzZs8rIyLD+x6MwzwT9888/tX//fn300Udq06aNJOn777+36dO4cWP93//9n/766698j3YPGjRIDRs21JQpU3Tx4kXdf//9V103cCMqyh8LTZs21cKFC1WxYkV5e3vn2Sc4OFiJiYm68847C7VMb29vRUZGKjIyUg888IA6duyY575Xr149JSQk2OzzGzdulIODg/UmbwAu/Sj90ksvKTY2Vr/++qtcXFyUlJSU79Gxxo0ba/bs2bpw4UKeR7s3btyoKVOm6N5775V06WaK3GAJuH7lypXL8+9MNzc3de3aVV27dtWQIUNUt25d7dq166p/G9erV0+LFy+WYRjWo90bN26Ul5eX/vOf/+RbR9OmTbV48WIFBwfb/PCOksfp5Siyr776Sn///bceeeQRNWzY0Gbq2bOnZsyYobi4OM2fP19xcXHau3evdu3aZf2VLTg4WAMGDNDDDz+spUuX6siRI1q/fr0+/fRTSVLLli3l7u6ul156SYcOHdK8efMKdbOksmXLqnz58vrwww918OBBffPNN4qNjbXp06dPHwUEBKh79+7auHGjDh8+rMWLF2vz5s3WPvXq1dNtt92mF154QX369Cm2Xx+BG1m/fv3k5+enbt266bvvvrPul0899ZT11LVRo0Zp3Lhxev/993XgwAHt2LFDH3zwQZ7LGz9+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\n"},"metadata":{}}]},{"cell_type":"code","source":["# Count the occurrences of each class in the target variable\n","class_counts = df['Exited'].value_counts()\n","\n","# Calculate the proportion of each class\n","class_proportions = class_counts / len(df)\n","\n","# Print the class counts and proportions\n","print(\"Class Counts:\")\n","print(class_counts)\n","print(\"\\nClass Proportions:\")\n","print(class_proportions)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Nn2ExIgcrgyB","executionInfo":{"status":"ok","timestamp":1714220720319,"user_tz":-180,"elapsed":492,"user":{"displayName":"Kenzy Kourah","userId":"10522561092114236921"}},"outputId":"1f3b0c98-efe2-4e58-cbf4-e9efe5007917"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["Class Counts:\n","Exited\n","0    7963\n","1    2037\n","Name: count, dtype: int64\n","\n","Class Proportions:\n","Exited\n","0    0.7963\n","1    0.2037\n","Name: count, dtype: float64\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from imblearn.combine import SMOTEENN\n","\n","\n","X = df.drop('Exited', axis=1)\n","y = df['Exited']\n","X_train, X_test, y_train, y_test = train_test_split(df.drop('Exited',axis=1),\n","                                             df['Exited'], test_size=0.235,\n","                                                   random_state=1)\n","\n","# Separate features and target variable\n","X = df.drop('Exited', axis=1)\n","y = df['Exited']\n","\n","# Using SMOTE-ENN\n","smote_enn = SMOTEENN()\n","X_resampled_smote_enn, y_resampled_smote_enn = smote_enn.fit_resample(X, y)\n","\n","# Concatenate resampled data back into DataFrame\n","df_smote_enn = pd.concat([pd.DataFrame(X_resampled_smote_enn, columns=X.columns),\n","                          pd.DataFrame(y_resampled_smote_enn, columns=['Exited'])], axis=1)\n","print(df_smote_enn['Exited'].value_counts())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YnXz6eWVrLKu","executionInfo":{"status":"ok","timestamp":1714220723086,"user_tz":-180,"elapsed":3,"user":{"displayName":"Kenzy Kourah","userId":"10522561092114236921"}},"outputId":"9e91ce75-3b46-4ea4-865f-d05f006671c9"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Exited\n","1    3640\n","0    2905\n","Name: count, dtype: int64\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import cross_val_score, cross_val_predict\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_auc_score\n","\n","X = df.drop('Exited', axis=1)\n","y = df['Exited']\n","X_train, X_test, y_train, y_test_cv1 = train_test_split(df.drop('Exited', axis=1),\n","                                                        df['Exited'], test_size=0.235,\n","                                                        random_state=1)\n","\n","dt_classifier = DecisionTreeClassifier()\n","dt_classifier.fit(X_resampled_smote_enn, y_resampled_smote_enn)\n","y_pred = dt_classifier.predict(X_test)\n","num_folds = 10\n","\n","# Evaluate model performance\n","accuracy = accuracy_score(y_test_cv1, y_pred)\n","conf_matrix = confusion_matrix(y_test_cv1, y_pred)\n","class_report = classification_report(y_test_cv1, y_pred)\n","\n","# Perform cross-validation for Decision Tree\n","dt_scores = cross_val_score(dt_classifier, X_resampled_smote_enn, y_resampled_smote_enn, cv=num_folds)\n","\n","# Perform cross-validation predictions for Decision Tree\n","y_pred_cv1 = cross_val_predict(dt_classifier, X_resampled_smote_enn, y_resampled_smote_enn, cv=num_folds)\n","\n","# Calculate confusion matrix after cross-validation\n","conf_matrix_cv = confusion_matrix(y_resampled_smote_enn, y_pred_cv1)\n","\n","# Calculate classification report after cross-validation\n","class_report_cv_DT = classification_report(y_resampled_smote_enn, y_pred_cv1)\n","\n","# Calculate AUC after cross-validation\n","auc_cv = roc_auc_score(y_resampled_smote_enn, y_pred_cv1)\n","\n","# Print confusion matrix after CV\n","print(\"Confusion Matrix after cross-validation:\")\n","print(conf_matrix_cv)\n","\n","# Print classification report after CV\n","print(\"Classification Report after cross-validation:\")\n","print(class_report_cv_DT)\n","\n","# Print Decision Tree cross-validation scores\n","print(\"Decision Tree Cross-Validation Scores:\", dt_scores)\n","print(\"Mean Decision Tree Accuracy:\", dt_scores.mean())\n","\n","# Print AUC after cross-validation\n","print(\"AUC after cross-validation:\", auc_cv)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oU27ULfuvS2f","executionInfo":{"status":"ok","timestamp":1714220727789,"user_tz":-180,"elapsed":1233,"user":{"displayName":"Kenzy Kourah","userId":"10522561092114236921"}},"outputId":"3a1eb84f-4342-4cc5-eaff-812e5347ef23"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix after cross-validation:\n","[[2295  610]\n"," [ 526 3114]]\n","Classification Report after cross-validation:\n","              precision    recall  f1-score   support\n","\n","           0       0.81      0.79      0.80      2905\n","           1       0.84      0.86      0.85      3640\n","\n","    accuracy                           0.83      6545\n","   macro avg       0.82      0.82      0.82      6545\n","weighted avg       0.83      0.83      0.83      6545\n","\n","Decision Tree Cross-Validation Scores: [0.73587786 0.73435115 0.84122137 0.82748092 0.85954198 0.84862385\n"," 0.86391437 0.85015291 0.84250765 0.85626911]\n","Mean Decision Tree Accuracy: 0.8259941172351006\n","AUC after cross-validation: 0.8227558585992321\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import cross_val_score, cross_val_predict\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_auc_score\n","\n","X = df.drop('Exited', axis=1)\n","y = df['Exited']\n","X_train, X_test, y_train, y_test_cv2 = train_test_split(df.drop('Exited', axis=1),\n","                                                        df['Exited'], test_size=0.235,\n","                                                        random_state=1)\n","\n","rf_classifier = RandomForestClassifier(n_estimators=100)\n","rf_classifier.fit(X_resampled_smote_enn, y_resampled_smote_enn)\n","y_pred = rf_classifier.predict(X_test)\n","num_folds = 10\n","\n","# Evaluate model performance\n","accuracy = accuracy_score(y_test_cv2, y_pred)\n","conf_matrix = confusion_matrix(y_test_cv2, y_pred)\n","class_report = classification_report(y_test_cv2, y_pred)\n","\n","# Perform cross-validation for Random Forest\n","rf_scores = cross_val_score(rf_classifier, X_resampled_smote_enn, y_resampled_smote_enn, cv=num_folds)\n","\n","# Perform cross-validation predictions for Random Forest\n","y_pred_cv2 = cross_val_predict(rf_classifier, X_resampled_smote_enn, y_resampled_smote_enn, cv=num_folds)\n","\n","# Calculate confusion matrix after cross-validation\n","conf_matrix_cv = confusion_matrix(y_resampled_smote_enn, y_pred_cv2)\n","\n","# Calculate classification report after cross-validation\n","class_report_cv = classification_report(y_resampled_smote_enn, y_pred_cv2)\n","\n","# Calculate AUC after cross-validation\n","auc_cv = roc_auc_score(y_resampled_smote_enn, y_pred_cv2)\n","\n","# Print confusion matrix after CV\n","print(\"Confusion Matrix after cross-validation:\")\n","print(conf_matrix_cv)\n","\n","# Print classification report after CV\n","print(\"Classification Report after cross-validation:\")\n","print(class_report_cv)\n","\n","# Print Random Forest cross-validation scores\n","print(\"Random Forest Cross-Validation Scores:\", rf_scores)\n","print(\"Mean Random Forest Accuracy:\", rf_scores.mean())\n","\n","# Print AUC after cross-validation\n","print(\"AUC after cross-validation:\", auc_cv)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i4zYPBn7vQjJ","executionInfo":{"status":"ok","timestamp":1714220792877,"user_tz":-180,"elapsed":21612,"user":{"displayName":"Kenzy Kourah","userId":"10522561092114236921"}},"outputId":"03e435d6-8fe9-47c8-bf1c-99e26b3ed3b4"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix after cross-validation:\n","[[2533  372]\n"," [ 364 3276]]\n","Classification Report after cross-validation:\n","              precision    recall  f1-score   support\n","\n","           0       0.87      0.87      0.87      2905\n","           1       0.90      0.90      0.90      3640\n","\n","    accuracy                           0.89      6545\n","   macro avg       0.89      0.89      0.89      6545\n","weighted avg       0.89      0.89      0.89      6545\n","\n","Random Forest Cross-Validation Scores: [0.79694656 0.80458015 0.87938931 0.88854962 0.92671756 0.91437309\n"," 0.91284404 0.91131498 0.91284404 0.9204893 ]\n","Mean Random Forest Accuracy: 0.8868048649531947\n","AUC after cross-validation: 0.885972461273666\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict\n","from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_auc_score\n","from imblearn.over_sampling import SMOTE\n","from imblearn.under_sampling import EditedNearestNeighbours\n","from xgboost import XGBClassifier\n","\n","X = df.drop('Exited', axis=1)\n","y = df['Exited']\n","X_train, X_test, y_train, y_test_cv3 = train_test_split(df.drop('Exited', axis=1),\n","                                                        df['Exited'], test_size=0.235,\n","                                                        random_state=1)\n","\n","xgb_model = XGBClassifier()\n","xgb_model.fit(X_resampled_smote_enn, y_resampled_smote_enn)\n","\n","# Evaluate model performance on test data\n","y_pred = xgb_model.predict(X_test)\n","accuracy = accuracy_score(y_test_cv3, y_pred)\n","conf_matrix = confusion_matrix(y_test_cv3, y_pred)\n","class_report = classification_report(y_test_cv3, y_pred)\n","\n","# Perform cross-validation for XGBoost\n","num_folds = 10\n","xgb_scores = cross_val_score(xgb_model, X_resampled_smote_enn, y_resampled_smote_enn, cv=num_folds, scoring='accuracy')\n","\n","# Perform cross-validation predictions for XGBoost\n","y_pred_cv3 = cross_val_predict(xgb_model, X_resampled_smote_enn, y_resampled_smote_enn, cv=num_folds)\n","conf_matrix_cv = confusion_matrix(y_resampled_smote_enn, y_pred_cv3)\n","class_report_cv = classification_report(y_resampled_smote_enn, y_pred_cv3)\n","\n","# Calculate AUC after cross-validation\n","auc_cv = roc_auc_score(y_resampled_smote_enn, y_pred_cv3)\n","\n","# Print evaluation metrics\n","print(\"XGBoost Cross-Validation Scores:\", xgb_scores)\n","print(\"Mean XGBoost Accuracy:\", xgb_scores.mean())\n","print(\"Confusion Matrix (Cross-Validation):\\n\", conf_matrix_cv)\n","print(\"Classification Report (Cross-Validation):\\n\", class_report_cv)\n","print(\"AUC after cross-validation:\", auc_cv)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AU2-dhGYvWkh","executionInfo":{"status":"ok","timestamp":1714223474395,"user_tz":-180,"elapsed":26072,"user":{"displayName":"Kenzy Kourah","userId":"10522561092114236921"}},"outputId":"f2051bd5-1852-416e-e998-1a666707a9bb"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["XGBoost Cross-Validation Scores: [0.81374046 0.80458015 0.87175573 0.89160305 0.92977099 0.92201835\n"," 0.91743119 0.91590214 0.93425076 0.92201835]\n","Mean XGBoost Accuracy: 0.8923071176786422\n","Confusion Matrix (Cross-Validation):\n"," [[2542  363]\n"," [ 342 3298]]\n","Classification Report (Cross-Validation):\n","               precision    recall  f1-score   support\n","\n","           0       0.88      0.88      0.88      2905\n","           1       0.90      0.91      0.90      3640\n","\n","    accuracy                           0.89      6545\n","   macro avg       0.89      0.89      0.89      6545\n","weighted avg       0.89      0.89      0.89      6545\n","\n","AUC after cross-validation: 0.8905434926519264\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_auc_score\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import train_test_split, cross_val_score\n","import pandas as pd\n","\n","# Assuming df is your DataFrame\n","X = df.drop('Exited', axis=1)\n","y = df['Exited']\n","\n","# Splitting data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.235, random_state=1)\n","\n","# Creating Logistic Regression model\n","lr_model = LogisticRegression(max_iter=1000)\n","\n","# Cross-validation\n","cv_scores = cross_val_score(lr_model, X_train, y_train, cv=10, scoring='accuracy')  # Change cv value as needed\n","\n","# Fit model on the training data\n","lr_model.fit(X_train, y_train)\n","\n","# Make predictions on the test set\n","y_pred = lr_model.predict(X_test)\n","\n","# Evaluate the model\n","accuracy = accuracy_score(y_test, y_pred)\n","conf_matrix = confusion_matrix(y_test, y_pred)\n","class_report = classification_report(y_test, y_pred)\n","\n","# Calculate AUC\n","y_pred_proba = lr_model.predict_proba(X_test)[:, 1]\n","auc = roc_auc_score(y_test, y_pred_proba)\n","\n","# Print evaluation metrics\n","print(\"Cross-Validation Scores:\", cv_scores)\n","print(\"Mean Cross-Validation Score:\", cv_scores.mean())\n","print(\"Confusion Matrix:\")\n","print(conf_matrix)\n","print(\"Classification Report:\")\n","print(class_report)\n","print(\"AUC:\", auc)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gV9ENH_I30bC","executionInfo":{"status":"ok","timestamp":1714220908740,"user_tz":-180,"elapsed":3320,"user":{"displayName":"Kenzy Kourah","userId":"10522561092114236921"}},"outputId":"d66682a0-8386-462b-e87a-602291d932d1"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["Cross-Validation Scores: [0.78954248 0.79869281 0.8        0.79607843 0.79477124 0.78169935\n"," 0.79084967 0.78954248 0.78431373 0.78954248]\n","Mean Cross-Validation Score: 0.7915032679738563\n","Confusion Matrix:\n","[[1833   34]\n"," [ 462   21]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.80      0.98      0.88      1867\n","           1       0.38      0.04      0.08       483\n","\n","    accuracy                           0.79      2350\n","   macro avg       0.59      0.51      0.48      2350\n","weighted avg       0.71      0.79      0.72      2350\n","\n","AUC: 0.6837133120638396\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, precision_score, recall_score,f1_score\n","\n","precision_dict = classification_report(y_resampled_smote_enn, y_pred_cv1, output_dict=True)['weighted avg']\n","precision = precision_dict['precision']\n","\n","Recall_dict= classification_report(y_resampled_smote_enn, y_pred_cv1, output_dict=True)['weighted avg']\n","Recall = Recall_dict['recall']\n","\n","f1_dict=classification_report(y_resampled_smote_enn, y_pred_cv1, output_dict=True)['weighted avg']\n","f1 = f1_dict['f1-score']\n","\n","DecisionTree_metrics= {\n","    'Accuracy': dt_scores.mean(),\n","    #'Precision':precision,\n","    #'Recall': Recall,\n","    #'F1-score': f1\n","}\n","\n","\n","precision_dict1 = classification_report(y_resampled_smote_enn, y_pred_cv2, output_dict=True)['weighted avg']\n","precision = precision_dict1['precision']\n","\n","Recall_dict= classification_report(y_resampled_smote_enn, y_pred_cv2, output_dict=True)['weighted avg']\n","Recall = Recall_dict['recall']\n","\n","f1_dict=classification_report(y_resampled_smote_enn, y_pred_cv2, output_dict=True)['weighted avg']\n","f1 = f1_dict['f1-score']\n","\n","\n","rf_metrics={\n","     'Accuracy': rf_scores.mean() ,\n","     #'Precision':precision,\n","     #'Recall': Recall,\n","     #'F1-score': f1\n","\n","}\n","\n","\n","\n","precision_dict1 = classification_report(y_resampled_smote_enn, y_pred_cv3, output_dict=True)['weighted avg']\n","precision = precision_dict1['precision']\n","\n","Recall_dict= classification_report(y_resampled_smote_enn, y_pred_cv3, output_dict=True)['weighted avg']\n","Recall = Recall_dict['recall']\n","\n","f1_dict=classification_report(y_resampled_smote_enn, y_pred_cv3, output_dict=True)['weighted avg']\n","f1 = f1_dict['f1-score']\n","\n","\n","\n","XGBoost_metrics={\n","     'Accuracy':xgb_scores.mean(),\n","    #'Precision':precision,\n","     #'Recall': Recall,\n","     #'F1-score': f1\n","}\n","\n","metrics= list(DecisionTree_metrics.keys())\n","DecisionTree_values=list(DecisionTree_metrics.values())\n","XGBoost_values=list(XGBoost_metrics.values())\n","rf_values=list(rf_metrics.values())\n","\n","# Set the width of the bars\n","bar_width = 0.2\n","\n","# Set the positions of the bars on the x-axis\n","x1 = np.arange(len(metrics))\n","x2 = [x + bar_width for x in x1]\n","x3 = [x + bar_width for x in x2]\n","\n","# Create the bar plot\n","plt.figure(figsize=(10, 6))\n","plt.bar(x1, DecisionTree_values, width=bar_width, label='Decision Trees', color='blue')\n","plt.bar(x2, XGBoost_values, width=bar_width, label='Random Forest', color='red')\n","plt.bar(x3, rf_values, width=bar_width, label='XGBoost', color='orange')\n","\n","# Set the labels, title, and legend\n","plt.xlabel('Metrics')\n","plt.ylabel('Values')\n","plt.title('Comparison of Metrics by Model')\n","plt.xticks([x + bar_width for x in range(len(metrics))], metrics)\n","plt.legend()\n","\n","# Show the plot\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":402},"id":"idGg_NA-wxL3","executionInfo":{"status":"ok","timestamp":1713803790617,"user_tz":-120,"elapsed":579,"user":{"displayName":"Kenzy Kourah","userId":"10522561092114236921"}},"outputId":"3c5fd4bf-cc5f-4722-92b2-cdc7be1f4b95"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}